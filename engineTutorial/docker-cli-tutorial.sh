
## 这里我们主要介绍Docker CLI的对Docker 镜像和容器虚拟机的生命期相关操
## 作。

## 生命期相关操作包括：
## 1) 对于Docker镜像的获得
## 2) 对容器虚拟机的启动、停止、修改、删除。

## Docker命令行基本操作的格式是：
## docker [子命令] -[变量旗标，可选] [变量名，可选] 

## 当然，最便捷的快速查阅命令行可用指令的方法是：

docker help 
## 上面的命令将会打印出一系列docker相关的子命令。包括这一节我们将会详细
## 介绍的run, stop, kill, rm, rmi, ps, exec等命令。

## 使用 docker [子命令] --help 将会打印出每个子命令的详细信息。例如
docker run --help 
## 上面将会打印出跟docker run相关的所有命令行信息。

## 下面我们以几个简单的操作例子来进行讲解： 

## 运行一个Docker 镜像

docker run hello-world 

## 上面发生了什么事情呢？首先Docker会查阅本地镜像，是否包含一个名为
## hello-world的虚拟机镜像，如果不存在，那么docker引擎会到远端Docker服
## 务器中下载一个新的hello-world虚拟机镜像。在镜像下载完成后，会按照该
## 镜像默认的设置，打印出hello world的信息

## 当然这还是最基本的操作，让我们运行一个NGINX网页服务试试看，其实只需
## 要下面的命令：

docker run -d -p 9080:80 --name webserver nginx 

## 运行完成后，我们可以在当前电脑的浏览器中访问 http://localhost:9080，
## 看到NGINX的欢迎信息。(截图) 

## 上面这个命令发生了什么呢？首先，我们运行了一个代号为nginx的docker 虚
## 拟机镜像，Docker引擎发现当前电脑上不存在该镜像，于是从远端服务器上下
## 载了该镜像。我们通过--name 标签将该运行的镜像命名为webserver，以方便
## 后面操作。默认情况下，nginx 将会通过虚拟机的80号端口对网页访问做出响
## 应，我们通过 -p 标签，将访问端口映射到了宿主机的9080端口上。最后，我
## 们通过-d标签告诉docker引擎在后台运行这个虚拟机(daemon模式)。

## 我们可以通过下面ps子命令查阅正在运行的容器虚拟机：
docker ps 
## 以上命令运行完成后，可以看到一系列打印的信息，包括前面创建的
## webserver虚拟机。

## 有的时候为了调试或者好玩，我们需要在正在运行的虚拟机中执行一些命令。
## 可以通过exec子命令在已经运行的虚拟机中进行一次性操作。

docker exec webserver ps -A 

## 上面这个命令执行完成之后可以在命令行中打印出所有正在运行的进程，包括
## nginx和ps本身。

## 有的时候为了详细排错，我们可能需要"登陆"到该虚拟机进行交互式操作，这
## 可以通过-it卷标完成

docker exec -it webserver /bin/bash 

## 以上命令执行完成后，可以发现我们正在webserver的root命令行下，可以进
## 行各种交互操作。最后可以通过exit命令退出。

## 我们可以通过stop子命令终止一个正在运行的虚拟机

docker stop webserver 

## 那么以上虚拟机从我们当前系统中删除了吗？还没有，首先我们可以通过
docker ps -a 
## 查阅所有虚拟机，包括休眠状态下的虚拟机。在第一条目中，我们可以看到该
## 虚拟机只是被终止了，仍然存在在当前系统中。要彻底删除该虚拟机，可以使
## 用下面命令：

docker rm webserver 

## 执行完成后，我们可以发现webserver 虚拟机不再存在。 

## 前面我们介绍了一个docker虚拟机镜像可以用于产生多个虚拟机，那么
## webserver对应的虚拟机镜像如何删除呢？首先我们可以用images 子命令查阅
## 当前系统中已有的虚拟机镜像：

docker images 

## 可以从列表中看到我们刚才操作过的nginx 和hello-world 镜像 (截图) 

## 最后，我们可以用rmi子命令删除对应的虚拟机镜像
docker rmi webserver 

## 当然，上面操作都是最基本的docker引擎命令行操作。更复杂的操作往往通过
## 配置文件的方法完成，我们将在下一节介绍。
